2ProektDbContext:
MIGRATIONS:
// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProektDbContext;
#nullable disable
namespace ProektDbContext.Migrations
{
    [DbContext(typeof(ProektDbContexts))]
    [Migration("20230317202810_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("ProektDbContext.Model.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Schools");
                });
            modelBuilder.Entity("ProektDbContext.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointsForSchool")
                        .HasColumnType("int");
                    b.Property<int>("PointsForUnevirsity")
                        .HasColumnType("int");
                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Students");
                });
            modelBuilder.Entity("ProektDbContext.Model.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Towns");
                });
            modelBuilder.Entity("ProektDbContext.Model.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Universities");
                });
#pragma warning restore 612, 618
        }
    }
}



using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ProektDbContext.Migrations
{
    public partial class Start : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Schools",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Id_Town = table.Column<int>(type: "int", nullable: false),
                    PointsToEnter = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Schools", x => x.Id);
                });
            migrationBuilder.CreateTable(
                name: "Students",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SecondName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PointsForUnevirsity = table.Column<int>(type: "int", nullable: false),
                    PointsForSchool = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Students", x => x.Id);
                });
            migrationBuilder.CreateTable(
                name: "Towns",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Towns", x => x.Id);
                });
            migrationBuilder.CreateTable(
                name: "Universities",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Id_Town = table.Column<int>(type: "int", nullable: false),
                    PointsToEnter = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Universities", x => x.Id);
                });
        }
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Schools");
            migrationBuilder.DropTable(
                name: "Students");
            migrationBuilder.DropTable(
                name: "Towns");
            migrationBuilder.DropTable(
                name: "Universities");
        }
    }
}



// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProektDbContext;
#nullable disable
namespace ProektDbContext.Migrations
{
    [DbContext(typeof(ProektDbContexts))]
    [Migration("20230318112832_Tables")]
    partial class Tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("ProektDbContext.Model.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Schools");
                });
            modelBuilder.Entity("ProektDbContext.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsForSchool")
                        .HasColumnType("int");
                    b.Property<int>("PointsForUnevirsity")
                        .HasColumnType("int");
                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Students");
                });
            modelBuilder.Entity("ProektDbContext.Model.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Towns");
                });
            modelBuilder.Entity("ProektDbContext.Model.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Universities");
                });
#pragma warning restore 612, 618
        }
    }
}



using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable
namespace ProektDbContext.Migrations
{
    public partial class Tables : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "Id_Student",
                table: "Universities",
                type: "int",
                nullable: false,
                defaultValue: 0);
            migrationBuilder.AddColumn<int>(
                name: "Id_Student",
                table: "Schools",
                type: "int",
                nullable: false,
                defaultValue: 0);
        }
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Id_Student",
                table: "Universities");
            migrationBuilder.DropColumn(
                name: "Id_Student",
                table: "Schools");
        }
    }
}



// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProektDbContext;
#nullable disable
namespace ProektDbContext.Migrations
{
    [DbContext(typeof(ProektDbContexts))]
    [Migration("20230325151701_yes")]
    partial class yes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("ProektDbContext.Model.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Schools");
                });
            modelBuilder.Entity("ProektDbContext.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsForSchool")
                        .HasColumnType("int");
                    b.Property<int>("PointsForUnevirsity")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Students");
                });

            modelBuilder.Entity("ProektDbContext.Model.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Towns");
                });
            modelBuilder.Entity("ProektDbContext.Model.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Universities");
                });
#pragma warning restore 612, 618
        }
    }
}



using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable
namespace ProektDbContext.Migrations
{
    public partial class yes : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
        }
    }
}



// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProektDbContext;
#nullable disable
namespace ProektDbContext.Migrations
{
    [DbContext(typeof(ProektDbContexts))]
    partial class ProektDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("ProektDbContext.Model.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Schools");
                });
            modelBuilder.Entity("ProektDbContext.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsForSchool")
                        .HasColumnType("int");
                    b.Property<int>("PointsForUnevirsity")
                        .HasColumnType("int");
                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Students");
                });
            modelBuilder.Entity("ProektDbContext.Model.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Towns");
                });
            modelBuilder.Entity("ProektDbContext.Model.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<int>("Id_Student")
                        .HasColumnType("int");
                    b.Property<int>("Id_Town")
                        .HasColumnType("int");
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("PointsToEnter")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.ToTable("Universities");
                });
#pragma warning restore 612, 618
        }
    }
}



MODEL:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ProektDbContext.Model
{
    public class School
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Id_Town { get; set; }
        public int Id_Student { get; set; }
        public int PointsToEnter { get; set; }

    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ProektDbContext.Model
{
    public class Student
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string SecondName { get; set; }
        public string LastName { get; set; }
        public int PointsForUnevirsity { get; set; }
        public int PointsForSchool { get; set; }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ProektDbContext.Model
{
    public class Town
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ProektDbContext.Model
{
    public class University
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Id_Town { get; set; }
        public int Id_Student { get; set; }
        public int PointsToEnter { get; set; }
    }
}



ProektDbContext.cs :
using Microsoft.EntityFrameworkCore;
using ProektDbContext.Model;
namespace ProektDbContext
{
    public class ProektDbContexts : DbContext
    {
        public DbSet<Town> Towns { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<School> Schools { get; set; }
        public DbSet<University> Universities { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Server=DESKTOP-S10U54F\SQLEXPRESS;Database=Priemi;Trusted_Connection=True;");
            base.OnConfiguring(optionsBuilder);
        }
    }
}



1Priemi:
DISPLAYS:
using ProektDbContext.Model;
using Priemi.Things;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Displays
{
    public class SchoolDisplay
    {
        AllSchool sc = new AllSchool();
        private void ShowMenu()
        {
            Console.WriteLine(new string('-', 40));
            Console.WriteLine(new string(' ', 18) + "School" + new string(' ', 18));
            Console.WriteLine(new string('-', 40));
            Console.WriteLine("1. List all schools");
            Console.WriteLine("2. Add new school");
            Console.WriteLine("3.Update school");
            Console.WriteLine("4. Delete school by ID");
            Console.WriteLine("5. Accepted or not");
            Console.WriteLine("6. Exit");
        }
        public void Input()
        {
            var operation = -1;
            do
            {
                ShowMenu();
                operation = int.Parse(Console.ReadLine());
                switch (operation)
                {
                    case 1:
                        ListAll();
                        break;
                    case 2:
                        Add();
                        break;
                    case 3:
                        Update();
                        break;
                    case 4:
                        Delete();
                        break;
                    case 5:
                        Accepted();
                        break;
                    default:
                        break;
                }
            } while (operation != closeOperationId);
        }
        private int closeOperationId = 6;
        public SchoolDisplay()
        {
            Input();
        }
        public void Add()
        {
            School school = new School();
            Console.WriteLine("Entert name:");
            school.Name = Console.ReadLine();
            Console.WriteLine("Enter Town");
            school.Id_Town = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter student");
            school.Id_Student = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter points for enters");
            school.PointsToEnter = int.Parse(Console.ReadLine());
            sc.Add(school);
        }
        public void ListAll()
        {
            Console.WriteLine(new String('-', 40));
            Console.WriteLine(new String('-', 16) + "Schools" + new String(' ', 16));
            Console.WriteLine(new String('-', 40));
            var un = sc.GetAll();
            foreach (var item in un)
            {
                Console.WriteLine("{0} {1} {2} {3} {4} ", item.Id, item.Name, item.Id_Town, item.Id_Student, item.PointsToEnter);
            }
        }
        public void Update()
        {
            Console.WriteLine("Enter ID to update:");
            int id = int.Parse(Console.ReadLine());
            School s = sc.Get(id);
            if (s != null)
            {
                Console.WriteLine("Enter name:");
                s.Name = Console.ReadLine();
                Console.WriteLine("Enter town");
                s.Id_Town = int.Parse(Console.ReadLine());
                Console.WriteLine("Enter student:");
                s.Id_Student = int.Parse(Console.ReadLine());
                Console.WriteLine("Poitns for enter");
                s.PointsToEnter = int.Parse(Console.ReadLine());
                sc.Update(s);
            }
            else
            {
                Console.WriteLine("School not found!");
            }
        }
        public void Delete()
        {
            Console.WriteLine("Enter ID to delete:");
            int id = int.Parse(Console.ReadLine());
            sc.Delete(id);
            Console.WriteLine("Done.");
        }
        public void Accepted()
        {
            School school = new School();
            Student student = new Student();
            if (school.PointsToEnter <= student.PointsForUnevirsity)
            {
                Console.WriteLine("Accepted in " + school.Name);
            }
            else
            {
                Console.WriteLine("Not accepted");
            }
        }
    }
}



using ProektDbContext.Model;
using Priemi.Things;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Displays
{
    public  class StudentDisplay
    {
       AllStudents students= new AllStudents();
        public void ShowMenu()
        {
            Console.WriteLine(new string('-', 40));
            Console.WriteLine(new string(' ', 18) + "Students" + new string(' ', 18));
            Console.WriteLine(new string('-', 40));
            Console.WriteLine("1. List all students");
            Console.WriteLine("2. Add new student");
            Console.WriteLine("3. Update student");
            Console.WriteLine("4. Delete student by ID");
            Console.WriteLine("5. Exit");
        }
        public void Input()
        {
            var operation = -1;
            do
            {
                ShowMenu();
                operation = int.Parse(Console.ReadLine());
                switch (operation)
                {
                    case 1:
                        ListAll();
                        break;
                    case 2:
                        Add();
                        break;
                    case 3:
                        Update();
                        break;
                    case 4:
                        Delete();
                        break;
                    default:
                        break;
                }
            } while (operation != closeOperationId);
        }
        private int closeOperationId = 5;
        public StudentDisplay()
        {
            Input();
        }
        public void Add()
        {
            Student student = new Student();
            Console.WriteLine("Entert name:");
            student.FirstName = Console.ReadLine();
            student.SecondName = Console.ReadLine();
            student.LastName = Console.ReadLine();
            Console.WriteLine("Enter points for Uni");
            student.PointsForUnevirsity = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter points for school");
            student.PointsForSchool = int.Parse(Console.ReadLine());
            students.Add(student);
        }
        public void ListAll()
        {
            Console.WriteLine(new String('-', 40));
            Console.WriteLine(new String('-', 16) + "Students" + new String(' ', 16));
            Console.WriteLine(new String('-', 40));
            var st = students.GetAll();
            foreach (var item in st)
            {
                Console.WriteLine("{0} {1} {2} {3} {4} {5}", item.Id, item.FirstName, item.SecondName, item.LastName, item.PointsForUnevirsity, item.PointsForSchool);
            }
        }
        public void Update()
        {
            Console.WriteLine("Enter ID to update:");
            int id = int.Parse(Console.ReadLine());
            Student st = students.Get(id);
            if (st != null)
            {
                Console.WriteLine("Enter name:");
                st.FirstName = Console.ReadLine();
                st.SecondName = Console.ReadLine();
                st.LastName = Console.ReadLine();
                Console.WriteLine("Enter pointsUni:");
                st.PointsForUnevirsity = int.Parse(Console.ReadLine());
                Console.WriteLine("Enter pointsShool:");
                st.PointsForSchool = int.Parse(Console.ReadLine());
                students.Update(st);
            }
            else
            {
                Console.WriteLine("Student not found!");
            }
        }
        public void Delete()
        {
            Console.WriteLine("Enter ID to delete:");
            int id = int.Parse(Console.ReadLine());
            students.Delete(id);
            Console.WriteLine("Done.");
        }

    }
}



using Priemi.Things;
using ProektDbContext;
using ProektDbContext.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Displays
{
    public class TownDisplay
    {
        AllTown all = new AllTown();
        public void ShowMenu()
        {
            Console.WriteLine(new string('-', 40));
            Console.WriteLine(new string(' ', 18) + "Towns" + new string(' ', 18));
            Console.WriteLine(new string('-', 40));
            Console.WriteLine("1. List all towns");
            Console.WriteLine("2. Add new town");
            Console.WriteLine("3. Update towns");
            Console.WriteLine("4. Delete town by ID");
            Console.WriteLine("5. Exit");
        }
        public void Input()
        {
            var operation = -1;
            do
            {
                ShowMenu();
                operation = int.Parse(Console.ReadLine());
                switch (operation)
                {
                    case 1:
                        ListAll();
                        break;
                    case 2:
                        Add();
                        break;
                    case 3:
                        Update();
                        break;
                    case 4:
                        Delete();
                        break;
                    default:
                        break;
                }
            } while (operation != closeOperationId);
        }
        private int closeOperationId = 5;
        public TownDisplay()
        {
            Input();
        }
        public void Add()  
        {
            Town town = new Town();
            Console.WriteLine("Enter name:");
            town.Name = Console.ReadLine();
            all.Add(town);
        }
        public void ListAll()
        {
            Console.WriteLine(new String('-', 40));
            Console.WriteLine(new String('-', 16) + "Towns" + new String(' ', 16));
            Console.WriteLine(new String('-', 40));
            var towns = all.GetAll();
            foreach (var item in towns)
            {
                Console.WriteLine("{0} {1}", item.Id, item.Name);
            }
        }
        public void Update()
        {
            Console.WriteLine("Enter ID to update:");
            int id = int.Parse(Console.ReadLine());
            Town product = all.Get(id);
            if (product != null)
            {
                Console.WriteLine("Enter name:");
                product.Name = Console.ReadLine();
                all.Update(product);
            }
            else
            {
                Console.WriteLine("Town not found!");
            }
        }
        public void Delete()
        {
            Console.WriteLine("Enter ID to delete:");
            int id = int.Parse(Console.ReadLine());
            all.Delete(id);
            Console.WriteLine("Done.");
        }

    }
}



using ProektDbContext.Model;
using Priemi.Things;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Displays
{
    public class UniDisplay
    {
        AllUni uni = new AllUni();
        public void ShowMenu()
        {
            Console.WriteLine(new string('-', 40));
            Console.WriteLine(new string(' ', 18) + "University" + new string(' ', 18));
            Console.WriteLine(new string('-', 40));
            Console.WriteLine("1. List all universities");
            Console.WriteLine("2. Add new university");
            Console.WriteLine("3. Update university");
            Console.WriteLine("4. Delete university by ID");
            Console.WriteLine("5. Accepted or not");
            Console.WriteLine("6. Exit");
        }
        public void Input()
        {
            var operation = -1;
            do
            {
                ShowMenu();
                operation = int.Parse(Console.ReadLine());
                switch (operation)
                {
                    case 1:
                        ListAll();
                        break;
                    case 2:
                        Add();
                        break;
                    case 3:
                        Update();
                        break;
                    case 4:
                        Delete();
                        break;
                    case 5:
                        Accepted();
                        break;
                    default:
                        break;
                }
            } while (operation != closeOperationId);
        }
        private int closeOperationId = 6;
        public UniDisplay()
        {
            Input();
        }
        public void Add()
        {
            University university = new University();
            Console.WriteLine("Entert name:");
            university.Name = Console.ReadLine();
            Console.WriteLine("Enter Town");
            university.Id_Town = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter student");
            university.Id_Student = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter points for enters");
            university.PointsToEnter = int.Parse(Console.ReadLine());
            uni.Add(university);
        }
        public void ListAll()
        {
            Console.WriteLine(new String('-', 40));
            Console.WriteLine(new String('-', 16) + "Universities" + new String(' ', 16));
            Console.WriteLine(new String('-', 40));
            var un = uni.GetAll();
            foreach (var item in un)
            {
                Console.WriteLine("{0} {1} {2} {3} {4} ", item.Id, item.Name, item.Id_Town, item.Id_Student, item.PointsToEnter);
            }
        }
        public void Update()
        {
            Console.WriteLine("Enter ID to update:");
            int id = int.Parse(Console.ReadLine());
            University un = uni.Get(id);
            if (un != null)
            {
                Console.WriteLine("Enter name:");
                un.Name = Console.ReadLine();
                Console.WriteLine("Enter town");
                un.Id_Town = int.Parse(Console.ReadLine());
                Console.WriteLine("Enter student:");
                un.Id_Student = int.Parse(Console.ReadLine());
                Console.WriteLine("Poitns for enter");
                un.PointsToEnter = int.Parse(Console.ReadLine());
                uni.Update(un);
            }
            else
            {
                Console.WriteLine("University not found!");
            }
        }
        public void Delete()
        {
            Console.WriteLine("Enter ID to delete:");
            int id = int.Parse(Console.ReadLine());
            uni.Delete(id);
            Console.WriteLine("Done.");
        }
        public void Accepted()
        {
            University university = new University();
            Student student = new Student();
            if (university.PointsToEnter <= student.PointsForUnevirsity)
            {
                Console.WriteLine("Accepted in " + university.Name);
            }
            else
            {
                Console.WriteLine("Not accepted");
            }
        }

    }
}



THINGS:

using ProektDbContext;
using ProektDbContext.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Things
{
    public class AllSchool
    {
        private ProektDbContexts proektDbContexts;

        public List<School> GetAll()
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Schools.ToList();
            }
        }
        public School Get(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Schools.Find(id);
            }
        }
        public void Add(School school)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                proektDbContexts.Schools.Add(school);
                proektDbContexts.SaveChanges();
            }
        }
        public void Update(School school)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var item = proektDbContexts.Schools.Find(school.Id);
                if (item != null)
                {
                    proektDbContexts.Entry(item).CurrentValues.SetValues(school);
                    proektDbContexts.SaveChanges();
                }
            }
        }
        public void Delete(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var school = proektDbContexts.Schools.Find(id);
                if (school != null)
                {
                    proektDbContexts.Schools.Remove(school);
                    proektDbContexts.SaveChanges();
                }
            }
        }
    }
}



using ProektDbContext;
using ProektDbContext.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Things
{
    public class AllStudents
    {
        private ProektDbContexts proektDbContexts;

        public List<Student> GetAll()
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Students.ToList();
            }
        }
        public Student Get(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Students.Find(id);
            }
        }
        public void Add(Student student)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                proektDbContexts.Students.Add(student);
                proektDbContexts.SaveChanges();
            }
        }
        public void Update(Student student)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var item = proektDbContexts.Students.Find(student.Id);
                if (item != null)
                {
                    proektDbContexts.Entry(item).CurrentValues.SetValues(student);
                    proektDbContexts.SaveChanges();
                }
            }
        }
        public void Delete(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var student = proektDbContexts.Students.Find(id);
                if (student != null)
                {
                    proektDbContexts.Students.Remove(student);
                    proektDbContexts.SaveChanges();
                }
            }
        }
    }
}



using ProektDbContext;
using ProektDbContext.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Things
{
    public class AllTown
    {
        private ProektDbContexts proektDbContexts;

        public List<Town> GetAll()
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Towns.ToList();
            }
        }
        public Town Get(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Towns.Find(id);
            }
        }

        public void Add(Town town)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                proektDbContexts.Towns.Add(town);
                proektDbContexts.SaveChanges();
            }
        }
        public void Update(Town town)
        {
            using (proektDbContexts = new ProektDbContexts ())
            {
                var item = proektDbContexts.Towns.Find(town.Id);
                if (item != null)
                {
                    proektDbContexts.Entry(item).CurrentValues.SetValues(town);
                    proektDbContexts.SaveChanges();
                }
            }
        }
        public void Delete(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var town = proektDbContexts.Towns.Find(id);
                if (town != null)
                {
                    proektDbContexts.Towns.Remove(town);
                    proektDbContexts.SaveChanges();
                }
            }
        }
    }
}



using ProektDbContext;
using ProektDbContext.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Priemi.Things
{
    public class AllUni
    {
        private ProektDbContexts proektDbContexts;

        public List<University> GetAll()
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Universities.ToList();
            }
        }
        public University Get(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                return proektDbContexts.Universities.Find(id);
            }
        }

        public void Add(University university)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                proektDbContexts.Universities.Add(university);
                proektDbContexts.SaveChanges();
            }
        }
        public void Update(University university)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var item = proektDbContexts.Universities.Find(university.Id);
                if (item != null)
                {
                    proektDbContexts.Entry(item).CurrentValues.SetValues(university);
                    proektDbContexts.SaveChanges();
                }
            }
        }
        public void Delete(int id)
        {
            using (proektDbContexts = new ProektDbContexts())
            {
                var university = proektDbContexts.Universities.Find(id);
                if (university != null)
                {
                    proektDbContexts.Universities.Remove(university);
                    proektDbContexts.SaveChanges();
                }
            }
        }
    }
}



Program.cs:
using Priemi.Displays;
Input();
static void ShowMenu()
{
    Console.WriteLine(new string('-', 40));
    Console.WriteLine(new string(' ', 18) + "Dispay" + new string(' ', 18));
    Console.WriteLine(new string('-', 40));
    Console.WriteLine("1. Towns");
    Console.WriteLine("2. Univeristies");
    Console.WriteLine("3. Schools");
    Console.WriteLine("4. Students");
    Console.WriteLine("5. Exit");
}
static void Input()
{ 
    int closeOperationId = 5;
    var operation = -1;
    do
    {
        ShowMenu();
        operation = int.Parse(Console.ReadLine());
        switch (operation)
        {
            case 1:
                TownDisplay townDisplay = new TownDisplay();
                break;
            case 2:
                UniDisplay uniDisplay = new UniDisplay();
                break;
            case 3:
               SchoolDisplay schoolDisplay = new SchoolDisplay();
                    break;
            case 4:
                StudentDisplay studentDisplay = new StudentDisplay();
                break;
            default:
                break;
        }
    } while (operation != closeOperationId);
}